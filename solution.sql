-- Challenge - Joining on multiple tables
-- Write SQL queries to perform the following tasks using the Sakila database:

-- Here are some tips to help you successfully complete the lab:
-- Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:

-- Make sure you understand the relationships between the tables in the database. 
-- This will help you determine which tables to join and which columns to use in your joins.
-- Identify a common column for both tables to use in the ON section of the join. 
-- If there isn't a common column, you may need to add another table with a common column.
-- Decide which table you want to use as the left table (immediately after FROM) and which will be the right table (immediately after JOIN).
-- Determine which table you want to include all records from. This will help you decide which type of JOIN to use. 
-- If you want all records from the first table, use a LEFT JOIN. If you want all records from the second table, use a RIGHT JOIN. 
-- If you want records from both tables only where there is a match, use an INNER JOIN.
-- Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
-- Write the query
-- Tip 2: Break down the problem into smaller, more manageable parts. 
-- For example, you might start by writing a query to retrieve data from just two tables before adding additional tables to the join. 
-- Test your queries as you go, and check the output carefully to make sure it matches what you expect. 
-- This process takes time, so be patient and go step by step to build your query incrementally.

-- 1. List the number of films per category.

SELECT name as category, COUNT(*) AS number_of_films FROM CATEGORY as c
LEFT JOIN film_category as fc
ON c.category_id = fc.category_id
JOIN film as f
ON fc.film_id = f.film_id
GROUP BY category
ORDER BY number_of_films DESC;

-- 2. Retrieve the store ID, city, and country for each store.

SELECT s.store_id, ci.city, co.country FROM store AS s
JOIN ADDRESS AS a 
ON s.address_id = a.address_id
JOIN CITY AS ci
ON a.city_id = ci.city_id
JOIN COUNTRY AS co
ON ci.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.

SELECT s.store_id, SUM(p.amount) AS total_revenue FROM store AS s
LEFT JOIN customer as c
ON s.store_id = c.store_id
JOIN payment as p
ON c.customer_id = p.customer_id
GROUP BY s.store_id;

-- 4. Determine the average running time of films for each category.

SELECT c.name, ROUND(AVG(f.length)) as avg_running_time FROM category as c
LEFT JOIN film_category as fc
ON c.category_id = fc.category_id
JOIN film as f
ON fc.film_id = f.film_id
GROUP BY c.name;

-- 5. Identify the film categories with the longest average running time.

SELECT c.name, ROUND(AVG(f.length)) as avg_running_time FROM category as c
LEFT JOIN film_category as fc
ON c.category_id = fc.category_id
JOIN film as f
ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY avg_running_time DESC
LIMIT 1;

-- 6. Display the top 10 most frequently rented movies in descending order.

SELECT title, COUNT(r.rental_id) as rent_count FROM film as f
JOIN inventory as i
ON f.film_id = i.film_id
JOIN rental as r
ON i.inventory_id = r.inventory_id
GROUP BY title
ORDER BY rent_count DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT i.store_id, IF(COUNT(r.rental_id)=0,'True','False') AS is_available
FROM inventory AS i
JOIN film AS f ON i.film_id = f.film_id
LEFT JOIN rental AS r 
ON i.inventory_id = r.inventory_id AND r.return_date IS NULL
WHERE i.store_id = 1 AND f.title = 'ACADEMY DINOSAUR'
GROUP BY i.store_id;